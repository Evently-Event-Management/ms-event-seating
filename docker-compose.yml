services:
  # Event Seating PostgreSQL
  event-seating-db:
    image: postgres:17
    container_name: event-seating-postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: event_seating
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    command: postgres -c wal_level=logical
    volumes:
      - event-seating-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - event-service-net

  redis:
    image: redis:latest
    container_name: event-seating-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - event-service-net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5


  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:29092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT://0.0.0.0:29092,CONTROLLER://kafka:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - event-service-net
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 15s
      timeout: 10s
      retries: 10

  # Kafka UI for easy topic management and message browsing
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9000:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - event-service-net

  # Debezium for Change Data Capture (CDC)
  debezium-connect:
    image: debezium/connect:2.5
    container_name: debezium-connect
    ports:
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
    networks:
      - event-service-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/" ]
      interval: 10s
      timeout: 5s
      retries: 10

  # Initialization service to set up Debezium connectors
  debezium-connector-init:
    image: alpine:latest # Use a more capable image
    container_name: debezium-connector-init
    env_file:
      - .env # Pass environment variables from your .env file
    depends_on:
      debezium-connect:
        condition: service_healthy
    volumes:
      - ./debezium:/debezium
      - ./scripts/init-debezium.sh:/scripts/init-debezium.sh # Mount the new script
    command: >
      sh -c "
        echo 'Installing required tools...';
        apk add --no-cache curl gettext;
        /scripts/init-debezium.sh;
      "
    networks:
      - event-service-net


volumes:
  redis-data:
  kafka-data:
  event-seating-postgres-data:

networks:
  event-service-net:
    driver: bridge