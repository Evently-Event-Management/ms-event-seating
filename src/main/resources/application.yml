server:
  port: ${SERVER_PORT:8081}
  servlet:
    context-path: /api/event-seating
  tomcat:
    max-http-form-post-size: ${MAX_HTTP_FORM_POST_SIZE:50MB}

spring:
  application:
    name: ms-event-seating
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:https://auth.dpiyumal.me/realms/event-ticketing}
          jwk-set-uri: ${JWT_JWK_SET_URI:https://auth.dpiyumal.me/realms/event-ticketing/protocol/openid-connect/certs}
  servlet:
    multipart:
      enabled: true
      max-file-size: ${MAX_FILE_SIZE:10MB}
      max-request-size: ${MAX_REQUEST_SIZE:50MB}
      file-size-threshold: 2KB
  # Database Configuration
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/event_service}
    username: ${DATABASE_USERNAME:ticketly}
    password: ${DATABASE_PASSWORD:ticketly}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    validate-on-migrate: true
  # Redis Configuration
  cache:
    redis:
      time-to-live: 3600s
      key-prefix: "event-seating-ms::"
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: ${REDIS_TIMEOUT:2000}
      repositories:
        enabled: false
  kafka:
    consumer:
      group-id: ${KAFKA_GROUP_ID:event-command-service}
      properties:
        spring.json.trusted.packages: "com.ticketly.mseventseating.dto.event"
        spring.json.value.default.type: "com.ticketly.mseventseating.dto.event.SeatStatusChangeEventDto"
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
    listener:
      ack-mode: MANUAL_IMMEDIATE
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

  # Spring AI Vertex AI Configuration
  ai:
    vertex:
      ai:
        gemini:
          project-id: ${GCP_PROJECT_ID:ticketly-468219}
          location: ${GCP_LOCATION:us-central1}
          chat:
            options:
              model: ${GEMINI_CHAT_MODEL:gemini-2.5-flash-lite}
              temperature: 0.6
              max-output-tokens: 1024
              top-p: 0.9

# Keycloak Admin Client Configuration
keycloak:
  auth-server-url: ${KEYCLOAK_AUTH_SERVER_URL:https://auth.dpiyumal.me}
  realm: ${KEYCLOAK_REALM:event-ticketing}
  resource: ${KEYCLOAK_CLIENT_ID:events-service}
  credentials:
    secret: ${KEYCLOAK_CLIENT_SECRET:}

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.ticketly: ${COM_TICKETLY_LOG_LEVEL:DEBUG}
    org.springframework.security: ${SPRING_SECURITY_LOG_LEVEL:WARN}

# Application specific configurations
app:
  tier:
    limits:
      FREE:
        max-organizations-per-user: 3
        max-seating-layouts-per-org: 5
        max-active-events: 1
        max-sessions-per-event: 5
      PRO:
        max-organizations-per-user: 10
        max-seating-layouts-per-org: 25
        max-active-events: 10
        max-sessions-per-event: 52
      ENTERPRISE:
        max-organizations-per-user: 100
        max-seating-layouts-per-org: 200
        max-active-events: 1000
        max-sessions-per-event: 200

  # General app config
  seating_layout:
    default-page-size: 6
    default-gap: 25
  organization:
    max-logo-size: 1048576 # 1MB
  event:
    max-cover-photos: 5
    max-cover-photo-size: 31457280 # 3MB

# AWS Configuration
aws:
  region: ${AWS_REGION:ap-south-1}
  s3:
    bucket-name: ${AWS_S3_BUCKET_NAME:ticketly-storage}
  # Credentials from environment variables
  credentials:
    access-key: ${AWS_ACCESS_KEY_ID:}
    secret-key: ${AWS_SECRET_ACCESS_KEY:}
  # Local development settings (used only when needed)
  local:
    endpoint: ${AWS_LOCAL_ENDPOINT:}
    access-key: ${AWS_LOCAL_ACCESS_KEY:}
    secret-key: ${AWS_LOCAL_SECRET_KEY:}
